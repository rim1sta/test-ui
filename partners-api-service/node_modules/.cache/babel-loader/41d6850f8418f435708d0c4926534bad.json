{"ast":null,"code":"export class ApiServiceImpl {\n  constructor() {}\n\n  getPartner(id) {\n    return fetch(`http://localhost:3000/partner/${id}`, {\n      method: 'GET'\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      return res;\n    });\n  }\n\n  deletePartner(id) {\n    return fetch(`http://localhost:3000/partner/${id}`, {\n      method: 'DELETE'\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      return res;\n    });\n  }\n\n  updatePartner(partner) {\n    const method = 'POST';\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    const body = JSON.stringify(partner);\n    return fetch(`http://localhost:3000/`, {\n      method,\n      headers,\n      body\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      return res;\n    });\n  }\n\n  createPartner(partner) {\n    const method = 'PUT';\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    const body = JSON.stringify(partner);\n    return fetch(`http://localhost:3000/`, {\n      method,\n      headers,\n      body\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      return res;\n    });\n  }\n\n  getPartners(page, pageSize) {\n    return fetch(`http://localhost:3000/partners?page=${page}&pageSize=${pageSize}`, {\n      method: 'GET'\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      return res;\n    });\n  }\n\n}\nApiServiceImpl.instance = new ApiServiceImpl();","map":{"version":3,"sources":["/Users/rim1sta/Desktop/react-api-1/src/api/api-service.ts"],"names":["ApiServiceImpl","constructor","getPartner","id","fetch","method","then","res","json","console","log","deletePartner","updatePartner","partner","headers","Headers","append","body","JSON","stringify","createPartner","getPartners","page","pageSize","instance"],"mappings":"AAYA,OAAO,MAAMA,cAAN,CAA2C;AAEtCC,EAAAA,WAAR,GAAqB,CACpB;;AAIDC,EAAAA,UAAU,CAACC,EAAD,EAA8B;AACvC,WAAQC,KAAK,CAAE,iCAAgCD,EAAG,EAArC,EAAwC;AAClDE,MAAAA,MAAM,EAAE;AAD0C,KAAxC,CAAL,CAGRC,IAHQ,CAGHC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHJ,EAIRF,IAJQ,CAIHC,GAAG,IAAI;AACTE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,aAAOA,GAAP;AACH,KAPQ,CAAR;AAQA;;AACDI,EAAAA,aAAa,CAACR,EAAD,EAA+B;AAC5C,WAAOC,KAAK,CAAE,iCAAgCD,EAAG,EAArC,EAAwC;AAChDE,MAAAA,MAAM,EAAE;AADwC,KAAxC,CAAL,CAGNC,IAHM,CAGDC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHN,EAINF,IAJM,CAIDC,GAAG,IAAI;AACTE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,aAAOA,GAAP;AACH,KAPM,CAAP;AAQC;;AACDK,EAAAA,aAAa,CAACC,OAAD,EAAyC;AAClD,UAAMR,MAAM,GAAG,MAAf;AACA,UAAMS,OAAO,GAAG,IAAIC,OAAJ,EAAhB;AACAD,IAAAA,OAAO,CAACE,MAAR,CAAe,cAAf,EAA+B,kBAA/B;AACA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAAb;AACA,WAAOT,KAAK,CAAE,wBAAF,EAA2B;AAACC,MAAAA,MAAD;AAASS,MAAAA,OAAT;AAAkBG,MAAAA;AAAlB,KAA3B,CAAL,CACNX,IADM,CACDC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADN,EAENF,IAFM,CAEDC,GAAG,IAAI;AACTE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,aAAOA,GAAP;AACH,KALM,CAAP;AAMH;;AACDa,EAAAA,aAAa,CAACP,OAAD,EAAyC;AAClD,UAAMR,MAAM,GAAG,KAAf;AACA,UAAMS,OAAO,GAAG,IAAIC,OAAJ,EAAhB;AACAD,IAAAA,OAAO,CAACE,MAAR,CAAe,cAAf,EAA+B,kBAA/B;AACA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAAb;AACA,WAAOT,KAAK,CAAE,wBAAF,EAA2B;AAACC,MAAAA,MAAD;AAASS,MAAAA,OAAT;AAAkBG,MAAAA;AAAlB,KAA3B,CAAL,CACNX,IADM,CACDC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADN,EAENF,IAFM,CAEDC,GAAG,IAAI;AACTE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,aAAOA,GAAP;AACH,KALM,CAAP;AAMH;;AACDc,EAAAA,WAAW,CAACC,IAAD,EAAeC,QAAf,EAAuD;AACtE,WAAOnB,KAAK,CAAE,uCAAsCkB,IAAK,aAAYC,QAAS,EAAlE,EAAqE;AAC7ElB,MAAAA,MAAM,EAAE;AADqE,KAArE,CAAL,CAGNC,IAHM,CAGDC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAHN,EAINF,IAJM,CAIDC,GAAG,IAAI;AACTE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,aAAOA,GAAP;AACH,KAPM,CAAP;AAQK;;AA5D6C;AAArCP,c,CAKOwB,Q,GAAW,IAAIxB,cAAJ,E","sourcesContent":["import { PartnersPage } from './domain/partners-page';\nimport { Partner } from \"./domain\";\n\n\nexport interface ApiService {\n    getPartner(id: string): Promise<Partner>;\n    deletePartner(id: string): Promise<boolean>; \n    updatePartner(partner: Partner): Promise<{id: string}>;\n    createPartner(partner: Partner): Promise<{id: string}>;\n    getPartners(page: number, pageSize: number): Promise<PartnersPage>;\n}\n\nexport class ApiServiceImpl implements ApiService {\n \n    private constructor(){\n    }\n\n    static readonly instance = new ApiServiceImpl();\n\n    getPartner(id: string): Promise<Partner>{\n     return  fetch(`http://localhost:3000/partner/${id}`, {\n        method: 'GET'\n    })\n    .then(res => res.json())\n    .then(res => { \n        console.log(res);\n        return res as Partner;\n    })\n    }\n    deletePartner(id: string): Promise<boolean> {\n    return fetch(`http://localhost:3000/partner/${id}`, {\n        method: 'DELETE'\n    })\n    .then(res => res.json())\n    .then(res => {\n        console.log(res);\n        return res as boolean; \n    })\n    }\n    updatePartner(partner: Partner): Promise<{id: string}>{\n        const method = 'POST';\n        const headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n        const body = JSON.stringify(partner);\n        return fetch(`http://localhost:3000/`, {method, headers, body})\n        .then(res => res.json())\n        .then(res => {\n            console.log(res);\n            return res; \n        })\n    }\n    createPartner(partner: Partner): Promise<{id: string}>{\n        const method = 'PUT';\n        const headers = new Headers();\n        headers.append('Content-Type', 'application/json');\n        const body = JSON.stringify(partner);\n        return fetch(`http://localhost:3000/`, {method, headers, body})\n        .then(res => res.json())\n        .then(res => {\n            console.log(res);\n            return res; \n        })\n    }\n    getPartners(page: number, pageSize: number): Promise<PartnersPage>{\nreturn fetch(`http://localhost:3000/partners?page=${page}&pageSize=${pageSize}`, {\n    method: 'GET'\n})\n.then(res => res.json())\n.then(res => {\n    console.log(res);\n    return res as PartnersPage;\n})\n    }\n}"]},"metadata":{},"sourceType":"module"}