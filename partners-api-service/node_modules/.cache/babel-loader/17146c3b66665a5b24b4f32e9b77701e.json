{"ast":null,"code":"const API_URL = \"http://localhost:3000\";\nexport class ApiServiceImpl {\n  constructor() {}\n\n  getPartner(id) {\n    return fetch(`${API_URL}/partner/${id}`, {\n      method: \"GET\"\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      return res;\n    });\n  }\n\n  deletePartner(id) {\n    return fetch(`${API_URL}/partner/${id}`, {\n      method: \"DELETE\"\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      return res;\n    });\n  }\n\n  updatePartner(partner) {\n    const method = \"POST\";\n    const headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    const body = JSON.stringify(partner);\n    return fetch(`${API_URL}/partner/${partner.id}`, {\n      method,\n      headers,\n      body\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      return res;\n    });\n  }\n\n  createPartner(partner) {\n    const method = \"PUT\";\n    const headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    const body = JSON.stringify(partner);\n    return fetch(`${API_URL}`, {\n      method,\n      headers,\n      body\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      return res;\n    });\n  }\n\n  getPartners(page, pageSize) {\n    return fetch(`${API_URL}/partners?page=${page}&pageSize=${pageSize}`, {\n      method: \"GET\"\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      return res;\n    });\n  }\n\n}\nApiServiceImpl.instance = new ApiServiceImpl();\nexport const apiService = {\n  getPartner(id) {\n    return fetch(`${API_URL}/${id}`, {\n      method: \"GET\"\n    }).then(res => res.json()).then(res => {\n      return res;\n    });\n  },\n\n  deletePartner(id) {\n    return fetch(`${API_URL}/${id}`, {\n      method: \"DELETE\"\n    }).then(res => res.json()).then(res => {\n      return res;\n    });\n  },\n\n  updatePartner(partner) {\n    const method = \"POST\";\n    const headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    const body = JSON.stringify(partner);\n    return fetch(`${API_URL}/${partner.id}`, {\n      method,\n      headers,\n      body\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      return res;\n    });\n  },\n\n  createPartner(partner) {\n    const method = \"PUT\";\n    const headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    const body = JSON.stringify(partner);\n    return fetch(`${API_URL}`, {\n      method,\n      headers,\n      body\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      return res;\n    });\n  },\n\n  getPartners(page, pageSize) {\n    return fetch(`${API_URL}s?page=${page}&pageSize=${pageSize}`, {\n      method: \"GET\"\n    }).then(res => res.json()).then(res => {\n      console.log(res);\n      return res;\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/rim1sta/Desktop/react-api-1/src/api/api-service.ts"],"names":["API_URL","ApiServiceImpl","constructor","getPartner","id","fetch","method","then","res","json","console","log","deletePartner","updatePartner","partner","headers","Headers","append","body","JSON","stringify","createPartner","getPartners","page","pageSize","instance","apiService"],"mappings":"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","sourcesContent":["import { PartnersPage } from \"./domain/partners-page\";\nimport { Partner } from \"./domain\";\n\nconst API_URL = \"http://localhost:3000\";\n\nexport interface ApiService {\n  getPartner(id: string): Promise<Partner>;\n  deletePartner(id: string): Promise<boolean>;\n  updatePartner(partner: Partner): Promise<{ id: string }>;\n  createPartner(partner: Partner): Promise<{ id: string }>;\n  getPartners(page: number, pageSize: number): Promise<PartnersPage>;\n}\n\nexport class ApiServiceImpl implements ApiService {\n  private constructor() {}\n\n  static readonly instance = new ApiServiceImpl();\n\n  getPartner(id: string): Promise<Partner> {\n    return fetch(`${API_URL}/partner/${id}`, {\n      method: \"GET\",\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        return res as Partner;\n      });\n  }\n\n  deletePartner(id: string): Promise<boolean> {\n    return fetch(`${API_URL}/partner/${id}`, {\n      method: \"DELETE\",\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        return res as boolean;\n      });\n  }\n  updatePartner(partner: Partner): Promise<{ id: string }> {\n    const method = \"POST\";\n    const headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    const body = JSON.stringify(partner);\n    return fetch(`${API_URL}/partner/${partner.id}`, { method, headers, body })\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        return res;\n      });\n  }\n  createPartner(partner: Partner): Promise<{ id: string }> {\n    const method = \"PUT\";\n    const headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    const body = JSON.stringify(partner);\n    return fetch(`${API_URL}`, { method, headers, body })\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        return res;\n      });\n  }\n  getPartners(page: number, pageSize: number): Promise<PartnersPage> {\n    return fetch(`${API_URL}/partners?page=${page}&pageSize=${pageSize}`, {\n      method: \"GET\",\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        return res as PartnersPage;\n      });\n  }\n}\n\nexport const apiService: ApiService = {\n  getPartner(id: string): Promise<Partner> {\n    return fetch(`${API_URL}/${id}`, {\n      method: \"GET\",\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        return res as Partner;\n      });\n  },\n  deletePartner(id: string): Promise<boolean> {\n    return fetch(`${API_URL}/${id}`, {\n      method: \"DELETE\",\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        return res as boolean;\n      });\n  },\n  updatePartner(partner: Partner): Promise<{ id: string }> {\n    const method = \"POST\";\n    const headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    const body = JSON.stringify(partner);\n    return fetch(`${API_URL}/${partner.id}`, { method, headers, body })\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        return res;\n      });\n  },\n  createPartner(partner: Partner): Promise<{ id: string }> {\n    const method = \"PUT\";\n    const headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json\");\n    const body = JSON.stringify(partner);\n    return fetch(`${API_URL}`, { method, headers, body })\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        return res;\n      });\n  },\n  getPartners(page: number, pageSize: number): Promise<PartnersPage> {\n    return fetch(`${API_URL}s?page=${page}&pageSize=${pageSize}`, {\n      method: \"GET\",\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(res);\n        return res as PartnersPage;\n      });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}