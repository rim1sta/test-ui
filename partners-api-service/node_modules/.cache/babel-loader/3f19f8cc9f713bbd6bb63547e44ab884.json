{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/rim1sta/Desktop/react-api-1/src/components/partner-screen-components/contact-info-form.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nconst schema = Yup.object({\n  phone: Yup.string().required(),\n  email: Yup.string().required()\n});\nexport const ContactInfoForm = ({\n  contactInfo,\n  onContactInfoChange\n}) => {\n  _s();\n\n  const [email, setEmail] = useState(contactInfo.email);\n  const [phone, setPhone] = useState(contactInfo.phone);\n  const [validated, setValidated] = useState(false);\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n  };\n\n  const getCurrentContactInfo = () => ({\n    email,\n    phone\n  });\n\n  const onEmailChange = event => {\n    const email = event.target.value;\n    setEmail(email);\n    const ci = { ...getCurrentContactInfo(),\n      ...{\n        email\n      }\n    };\n    onContactInfoChange(ci);\n  };\n\n  const onPhoneChange = event => {\n    const phone = event.target.value;\n    setPhone(phone);\n    const ci = { ...getCurrentContactInfo(),\n      ...{\n        phone\n      }\n    };\n    onContactInfoChange(ci);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    validationSchema: schema,\n    onSubmit: console.log,\n    initialValues: {\n      email: {\n        email\n      },\n      phone: {\n        phone\n      }\n    },\n    children: ({\n      handleSubmit,\n      handleChange,\n      handleBlur,\n      values,\n      touched,\n      isValid,\n      errors\n    }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u041A\\u043E\\u043D\\u0442\\u0430\\u043A\\u0442\\u044B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        noValidate: true,\n        validated: validated,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Row,\n          controlId: \"formHorizontalEmail\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            column: true,\n            sm: 2,\n            children: \"\\u042D\\u043B\\u0435\\u043A\\u0442\\u0440\\u043E\\u043D\\u043D\\u0430\\u044F \\u043F\\u043E\\u0447\\u0442\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            sm: 10,\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              placeholder: \"\\u042D\\u043B\\u0435\\u043A\\u0442\\u0440\\u043E\\u043D\\u043D\\u0430\\u044F \\u043F\\u043E\\u0447\\u0442\\u0430\",\n              value: values.email,\n              onChange: onEmailChange,\n              isValid: touched.email && !errors.email,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            children: \"\\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 \\u0432\\u0432\\u0435\\u0434\\u0435\\u043D\\u044B \\u0432\\u0435\\u0440\\u043D\\u043Es\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Row,\n          controlId: \"formHorizontalPhone\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            column: true,\n            sm: 2,\n            children: \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            sm: 10,\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"phone\",\n              placeholder: \"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\",\n              value: phone,\n              onChange: onPhoneChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 7\n  }, this);\n};\n\n_s(ContactInfoForm, \"uxkqGqcB709n3G3WND6yCdxXdpA=\");\n\n_c = ContactInfoForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactInfoForm\");","map":{"version":3,"sources":["/Users/rim1sta/Desktop/react-api-1/src/components/partner-screen-components/contact-info-form.tsx"],"names":["React","useState","Form","Col","Row","Formik","Yup","schema","object","phone","string","required","email","ContactInfoForm","contactInfo","onContactInfoChange","setEmail","setPhone","validated","setValidated","handleSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","getCurrentContactInfo","onEmailChange","target","value","ci","onPhoneChange","console","log","handleChange","handleBlur","values","touched","isValid","errors"],"mappings":"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","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport { FC } from \"react\";\nimport Form from 'react-bootstrap/Form'\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport { ContactInfo } from '../../api/domain/contact-info'\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\n\n\n\nexport interface ContactInfoProps { \ncontactInfo: ContactInfo;\nonContactInfoChange(value: ContactInfo): void;\n}\n\n\n\n\n\nconst schema = Yup.object({\n  phone: Yup.string().required(),\n  email: Yup.string().required(),\n});\n\n\nexport const ContactInfoForm: FC<ContactInfoProps> = ({contactInfo, onContactInfoChange}) => {\nconst [email, setEmail] = useState(contactInfo.email);\nconst [phone, setPhone] = useState(contactInfo.phone);\nconst [validated, setValidated] = useState(false);\n\nconst handleSubmit = (event:any) => {\n  const form = event.currentTarget;\n  if (form.checkValidity() === false) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  setValidated(true);\n};\n\n\nconst getCurrentContactInfo = (): ContactInfo => ({\n  email, phone\n})\n\n\nconst onEmailChange = (event: ChangeEvent<HTMLInputElement>) => {\n  const email = event.target.value\n  setEmail(email);\n  const ci = {...getCurrentContactInfo(), ...{email}};\n  onContactInfoChange(ci);\n}\nconst onPhoneChange = (event: ChangeEvent<HTMLInputElement>) => {\n  const phone = event.target.value\n  setPhone(phone);\n  const ci = {...getCurrentContactInfo(), ...{phone}};\n  onContactInfoChange(ci);\n}\n\n\n    return(\n      <Formik\n      validationSchema={schema}\n      onSubmit={console.log}\n      initialValues={{\n        email: {email},\n        phone: {phone},\n      }}\n    >\n      {({\n        handleSubmit,\n        handleChange,\n        handleBlur,\n        values,\n        touched,\n        isValid,\n        errors,\n      }) => (\n        <>\n            <h2>Контакты</h2>\n        <Form noValidate validated={validated} onSubmit={handleSubmit}>\n        <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n          <Form.Label column sm={2}>\n            Электронная почта\n          </Form.Label>\n          <Col sm={10}>\n            <Form.Control \n            type=\"email\" \n            placeholder=\"Электронная почта\"   \n            value={values.email}\n            onChange={onEmailChange}\n            isValid={touched.email && !errors.email}\n            required/>\n          </Col>\n          <Form.Control.Feedback>данные введены верноs</Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group as={Row} controlId=\"formHorizontalPhone\">\n          <Form.Label column sm={2}>\n            Телефон\n          </Form.Label>\n          <Col sm={10}>\n            <Form.Control \n            type=\"phone\" \n            placeholder=\"Телефон\"   \n            value={phone}\n            onChange={onPhoneChange}\n            required\n            />\n          </Col>\n        </Form.Group>\n        </Form>\n        </>\n         )}\n         </Formik>\n    )\n    \n    }"]},"metadata":{},"sourceType":"module"}